// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NERBABO.ApiService.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NERBABO.ApiService.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250625111855_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseModule", b =>
                {
                    b.Property<long>("CoursesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModulesId")
                        .HasColumnType("bigint");

                    b.HasKey("CoursesId", "ModulesId");

                    b.HasIndex("ModulesId");

                    b.ToTable("CourseModule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Account.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("IsEmailConfirmed");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("IsLockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPhoneConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("IsTwoFactorEnabled");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Actions.Models.CourseAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AdministrationCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CoordenatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("varchar(55)");

                    b.Property<int>("Regiment")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<int[]>("WeekDays")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("AdministrationCode")
                        .IsUnique();

                    b.HasIndex("CoordenatorId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Actions", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Actions.Models.TeacherModuleAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<float>("AvaliationNerba")
                        .HasColumnType("real");

                    b.Property<float>("AvaliationStudents")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalPayment")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherModuleActions", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Companies.Models.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AtivitySector")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(155)");

                    b.Property<string>("Locality")
                        .HasColumnType("varchar(55)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(155)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(9)");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Courses.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<int[]>("Destinators")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<long>("FrameId")
                        .HasColumnType("bigint");

                    b.Property<int>("MinHabilitationLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Objectives")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("TotalDuration")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FrameId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Frames.Models.Frame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Intervention")
                        .IsRequired()
                        .HasColumnType("varchar(55)");

                    b.Property<string>("InterventionType")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Operation", "Program")
                        .IsUnique();

                    b.ToTable("Frames", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Global.Models.GeneralInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BankEntity")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<float>("HourValueAlimentation")
                        .HasColumnType("decimal");

                    b.Property<float>("HourValueTeacher")
                        .HasColumnType("decimal");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("char(25)");

                    b.Property<int?>("IvaId")
                        .HasColumnType("integer");

                    b.Property<string>("LogoFinancing")
                        .HasColumnType("text");

                    b.Property<string>("Nipc")
                        .IsRequired()
                        .HasColumnType("char(9)");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IvaId")
                        .IsUnique();

                    b.ToTable("GeneralInfo");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Global.Models.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ValuePercent")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Taxes", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Modules.Models.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Hours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.People.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Habilitation")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("IBAN")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<DateOnly?>("IdentificationValidationDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NIF")
                        .IsRequired()
                        .HasColumnType("char(9)");

                    b.Property<string>("NISS")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Naturality")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(9)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("NIF")
                        .IsUnique();

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Students.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyRole")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EnrolledInCQ")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnrolledInFM")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmployeed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRegisteredWithJobCenter")
                        .HasColumnType("boolean");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Teachers.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AvarageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.Property<string>("Ccp")
                        .IsRequired()
                        .HasColumnType("varchar(55)");

                    b.Property<string>("Competences")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("N/A");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IrsRegimeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLecturingCQ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLecturingFM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("IvaRegimeId")
                        .HasColumnType("integer");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IrsRegimeId");

                    b.HasIndex("IvaRegimeId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("CourseModule", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Courses.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NERBABO.ApiService.Core.Modules.Models.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Account.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Account.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NERBABO.ApiService.Core.Account.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Account.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Account.Models.User", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.People.Models.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("NERBABO.ApiService.Core.Account.Models.User", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Actions.Models.CourseAction", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Account.Models.User", "Coordenator")
                        .WithMany("Actions")
                        .HasForeignKey("CoordenatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NERBABO.ApiService.Core.Courses.Models.Course", "Course")
                        .WithMany("Actions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NERBABO.ApiService.Core.Teachers.Models.Teacher", null)
                        .WithMany("Action")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Coordenator");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Actions.Models.TeacherModuleAction", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Actions.Models.CourseAction", "Action")
                        .WithMany("TeacherModuleActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NERBABO.ApiService.Core.Modules.Models.Module", "Module")
                        .WithMany("TeacherModuleActions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NERBABO.ApiService.Core.Teachers.Models.Teacher", "Teacher")
                        .WithMany("TeacherModuleActions")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Module");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Courses.Models.Course", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Frames.Models.Frame", "Frame")
                        .WithMany("Courses")
                        .HasForeignKey("FrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Frame");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Global.Models.GeneralInfo", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Global.Models.Tax", "IvaTax")
                        .WithOne("GeneralInfo")
                        .HasForeignKey("NERBABO.ApiService.Core.Global.Models.GeneralInfo", "IvaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("IvaTax");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Students.Models.Student", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Companies.Models.Company", "Company")
                        .WithMany("Students")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NERBABO.ApiService.Core.People.Models.Person", "Person")
                        .WithOne("Student")
                        .HasForeignKey("NERBABO.ApiService.Core.Students.Models.Student", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Teachers.Models.Teacher", b =>
                {
                    b.HasOne("NERBABO.ApiService.Core.Global.Models.Tax", "IrsRegime")
                        .WithMany("IrsTeachers")
                        .HasForeignKey("IrsRegimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NERBABO.ApiService.Core.Global.Models.Tax", "IvaRegime")
                        .WithMany("IvaTeachers")
                        .HasForeignKey("IvaRegimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NERBABO.ApiService.Core.People.Models.Person", "Person")
                        .WithOne("Teacher")
                        .HasForeignKey("NERBABO.ApiService.Core.Teachers.Models.Teacher", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IrsRegime");

                    b.Navigation("IvaRegime");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Account.Models.User", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Actions.Models.CourseAction", b =>
                {
                    b.Navigation("TeacherModuleActions");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Companies.Models.Company", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Courses.Models.Course", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Frames.Models.Frame", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Global.Models.Tax", b =>
                {
                    b.Navigation("GeneralInfo");

                    b.Navigation("IrsTeachers");

                    b.Navigation("IvaTeachers");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Modules.Models.Module", b =>
                {
                    b.Navigation("TeacherModuleActions");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.People.Models.Person", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NERBABO.ApiService.Core.Teachers.Models.Teacher", b =>
                {
                    b.Navigation("Action");

                    b.Navigation("TeacherModuleActions");
                });
#pragma warning restore 612, 618
        }
    }
}
