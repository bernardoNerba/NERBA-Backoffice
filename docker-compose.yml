services:
  postgres:
    image: postgres:17.4
    container_name: nerbabo-postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256 --auth-local=scram-sha-256
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SecurePostgresPassword123!}
      POSTGRES_DB: nerbabo_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nerbabo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.4
    container_name: nerbabo-redis
    command: ["--save", "60", "1"]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-SecureRedisPassword123!}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nerbabo-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $REDIS_PASSWORD --raw incr ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: NERBABO.Backend/NERBABO.ApiService/Dockerfile
    container_name: nerbabo-api
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__postgres: Host=postgres;Port=5432;Username=postgres;Password=${POSTGRES_PASSWORD:-SecurePostgresPassword123!};Database=nerbabo_db
      ConnectionStrings__redis: redis:6379,password=${REDIS_PASSWORD:-SecureRedisPassword123!}

      # JWT Configuration
      JWT__Key: ${JWT_KEY:-j+X!w*Ky4n:HRxJSfc#Zr2KknShQLZ2A@YPd+=w)NJGDbBirk?4ZN8}
      JWT__ExpiresInDays: ${JWT_EXPIRES_DAYS:-7}
      JWT__Issuer: ${JWT_ISSUER:-http://localhost:5001}
      JWT__ClientUrl: ${CLIENT_URL:-http://localhost:4200}

      # Admin Configuration
      Admin__username: ${ADMIN_USERNAME:-admin}
      Admin__email: ${ADMIN_EMAIL:-admin@example.com}
      Admin__password: ${ADMIN_PASSWORD:-Admin123!}

      # CORS Configuration
      CORS__AllowedOrigins__0: ${CLIENT_URL:-http://localhost:4200}
      CORS__AllowedOrigins__1: ${CLIENT_URL_HTTPS:-https://localhost:4200}

      # OpenTelemetry
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY: in_memory
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: "true"
    ports:
      - "5001:8080"
    volumes:
      - api_uploads:/app/wwwroot
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nerbabo-network

  angular:
    build:
      context: ./NERBABO.Frontend
      dockerfile: Dockerfile
    container_name: nerbabo-angular
    environment:
      NODE_ENV: production
      # The Angular app will determine the API URL dynamically
    ports:
      - "4200:80"
    depends_on:
      - api
    networks:
      - nerbabo-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nerbabo-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "8080:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - nerbabo-network

  redis-insight:
    image: redis/redisinsight:latest
    container_name: nerbabo-redis-insight
    ports:
      - "5540:5540"
    depends_on:
      - redis
    volumes:
      - redisinsight_data:/data
    networks:
      - nerbabo-network

volumes:
  postgres_data:
    name: nerbabo-postgres-data
  redis_data:
    name: nerbabo-redis-data
  pgadmin_data:
    name: nerbabo-pgadmin-data
  redisinsight_data:
    name: nerbabo-redisinsight-data
  api_uploads:
    name: nerbabo-api-uploads

networks:
  nerbabo-network:
    driver: bridge
